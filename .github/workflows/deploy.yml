name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  REPOSITORY: nca-toolkit-repo
  SERVICE_NAME: nca-toolkit-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }} || true

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: Deploy to Cloud Run
      run: |
        IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image $IMAGE_URI \
          --project ${{ env.PROJECT_ID }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --memory=16Gi \
          --cpu=4 \
          --cpu-boost \
          --min-instances=0 \
          --max-instances=5 \
          --timeout=300s \
          --set-env-vars=GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }},GCP_SA_CREDENTIALS=${{ secrets.GCP_SA_KEY }},API_KEY=${{ secrets.API_KEY }}

    - name: Health Check
      run: |
        SERVICE_URL="https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.run.app/health"
        echo "=== Starting Health Check ==="
        echo "Service URL: $SERVICE_URL"
        echo "Waiting for service to become healthy..."
        
        for i in {1..10}; do
          echo "\nAttempt $i/10:"
          RESPONSE=$(curl -si -X GET "$SERVICE_URL" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.API_KEY }}" \
            -w "\nHTTP_STATUS:%{http_code}" \
            -o response_body.txt)
          
          HTTP_STATUS=$(grep 'HTTP_STATUS:' <<< "$RESPONSE" | cut -d':' -f2 | xargs)
          
          echo "Response Status: $HTTP_STATUS"
          echo "Response Body:"
          cat response_body.txt
          
          case $HTTP_STATUS in
            200) 
              echo " Health check passed!"
              exit 0
              ;;
            401) 
              echo ""
              ;;
            502|503|504)
              echo ""
              ;;
            *)
              echo ""
              ;;
          esac
          
          sleep $((i*5))
        done
        
        echo ""
        echo "=== Debug Information ==="
        echo "1. Verify service logs in Google Cloud Console"
        echo "2. Check API_KEY is correctly set"
        echo "3. Test manually: curl -v $SERVICE_URL"
        exit 1

    - name: Show Output
      run: echo "Deployed to https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.run.app"