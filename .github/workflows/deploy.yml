name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  REPOSITORY: nca-toolkit-repo
  SERVICE_NAME: nca-toolkit-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Push Container
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        # Set image URI
        IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        
        # Deploy using individual environment variables
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image $IMAGE_URI \
          --project ${{ env.PROJECT_ID }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --memory=16Gi \
          --cpu=4 \
          --cpu-boost \
          --min-instances=0 \
          --max-instances=5 \
          --timeout=300s \
          --set-env-vars="GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}" \
          --set-env-vars="API_KEY=${{ secrets.API_KEY }}"
          
        # Now update the service account separately to avoid escaping issues
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa-key.json
        cat /tmp/sa-key.json | gcloud run services update ${{ env.SERVICE_NAME }} \
          --project ${{ env.PROJECT_ID }} \
          --region ${{ env.REGION }} \
          --update-env-vars="GCP_SA_CREDENTIALS=$(cat /tmp/sa-key.json | tr -d '\n' | sed 's/"/\\"/g')"
        rm -f /tmp/sa-key.json

    - name: Health Check
      run: |
        SERVICE_URL="https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.run.app/health"
        echo "=== Starting Health Check ==="
        echo "Service URL: $SERVICE_URL"
        echo "Waiting for service to become healthy..."
        
        for i in {1..10}; do
          echo "Attempt $i/10:"
          
          # Use curl with proper error handling
          HTTP_STATUS=$(curl -s -o response_body.txt -w "%{http_code}" "$SERVICE_URL" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.API_KEY }}" || echo "000")
          
          echo "Response Status: $HTTP_STATUS"
          echo "Response Body:"
          cat response_body.txt || echo "No response body"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo " Health check passed!"
            exit 0
          elif [ "$HTTP_STATUS" = "401" ]; then
            echo ""
          elif [ "$HTTP_STATUS" = "502" ] || [ "$HTTP_STATUS" = "503" ] || [ "$HTTP_STATUS" = "504" ]; then
            echo ""
          elif [ "$HTTP_STATUS" = "000" ]; then
            echo ""
          else
            echo ""
          fi
          
          sleep $((i*5))
        done
        
        echo ""
        echo "=== Debug Information ==="
        echo "1. Verify service logs in Google Cloud Console"
        echo "2. Check API_KEY is correctly set"
        echo "3. Test manually: curl -v $SERVICE_URL"
        exit 1

    - name: Show Output
      run: echo "Deployed to https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.run.app"